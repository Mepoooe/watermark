/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$cursor: (34px, 148px, -34px, -148px, 21px, 20px, 194px, 172px, '../img/sprite.png', 'cursor', );
$download: (102px, 103px, -102px, -103px, 39px, 27px, 194px, 172px, '../img/sprite.png', 'download', );
$en: (51px, 103px, -51px, -103px, 41px, 33px, 194px, 172px, '../img/sprite.png', 'en', );
$fb-hover: (102px, 0px, -102px, 0px, 41px, 41px, 194px, 172px, '../img/sprite.png', 'fb-hover', );
$fb: (0px, 52px, 0px, -52px, 41px, 41px, 194px, 172px, '../img/sprite.png', 'fb', );
$like-hover: (51px, 52px, -51px, -52px, 41px, 41px, 194px, 172px, '../img/sprite.png', 'like-hover', );
$like: (102px, 52px, -102px, -52px, 41px, 41px, 194px, 172px, '../img/sprite.png', 'like', );
$ru: (0px, 103px, 0px, -103px, 41px, 35px, 194px, 172px, '../img/sprite.png', 'ru', );
$slider-opacity: (0px, 148px, 0px, -148px, 24px, 24px, 194px, 172px, '../img/sprite.png', 'sliderOpacity', );
$slider-opacity-active: (151px, 103px, -151px, -103px, 24px, 24px, 194px, 172px, '../img/sprite.png', 'sliderOpacityActive', );
$twt-hover: (153px, 51px, -153px, -51px, 41px, 41px, 194px, 172px, '../img/sprite.png', 'twt-hover', );
$twt: (153px, 0px, -153px, 0px, 41px, 41px, 194px, 172px, '../img/sprite.png', 'twt', );
$vk-hover: (51px, 0px, -51px, 0px, 41px, 42px, 194px, 172px, '../img/sprite.png', 'vk-hover', );
$vk: (0px, 0px, 0px, 0px, 41px, 42px, 194px, 172px, '../img/sprite.png', 'vk', );
$spritesheet-sprites: ($cursor, $download, $en, $fb-hover, $fb, $like-hover, $like, $ru, $slider-opacity, $slider-opacity-active, $twt-hover, $twt, $vk-hover, $vk, );
$spritesheet: (194px, 172px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
